using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Text.Json;

namespace IIGO.Services
{
    internal static class LicenseKeyService
    {
        static readonly byte[] p = [ 45, 45, 45, 45, 45, 66, 69, 71, 73, 78, 32, 82, 83, 65, 32, 80, 85, 66, 76, 73, 67, 32, 75, 69, 89, 45, 45, 45, 45, 45, 10, 77, 73, 73, 67, 67, 103, 75, 67, 65, 103, 69, 65, 49, 53, 43, 88, 57, 71, 78, 120, 75, 107, 110, 98, 53, 113, 89, 104, 97, 49, 76, 106, 65, 75, 86, 52, 68, 117, 111, 72, 83, 66, 83, 73, 113, 116, 113, 67, 80, 54, 117, 57, 78, 122, 122, 51, 116, 53, 47, 84, 56, 76, 66, 97, 10, 88, 104, 72, 68, 90, 50, 100, 69, 72, 68, 49, 114, 79, 106, 66, 111, 48, 87, 116, 69, 101, 67, 68, 56, 109, 122, 50, 111, 84, 115, 83, 109, 49, 84, 106, 85, 114, 55, 53, 108, 87, 85, 88, 117, 55, 120, 85, 88, 106, 86, 114, 97, 88, 80, 88, 100, 87, 86, 75, 113, 108, 98, 86, 118, 10, 104, 89, 117, 112, 66, 108, 114, 84, 76, 105, 120, 120, 105, 67, 85, 74, 106, 43, 99, 65, 110, 83, 114, 116, 97, 68, 82, 49, 116, 67, 104, 83, 86, 122, 99, 113, 56, 73, 56, 98, 87, 82, 87, 105, 83, 109, 102, 43, 53, 88, 106, 68, 101, 101, 73, 65, 73, 54, 112, 50, 106, 77, 112, 87, 10, 122, 90, 104, 66, 114, 77, 82, 111, 114, 103, 120, 89, 54, 99, 102, 53, 49, 119, 110, 105, 73, 77, 72, 83, 83, 79, 102, 115, 54, 109, 122, 51, 48, 84, 104, 112, 82, 78, 57, 107, 72, 114, 109, 104, 97, 43, 52, 73, 120, 112, 89, 79, 122, 51, 87, 111, 72, 50, 103, 74, 105, 68, 90, 111, 10, 80, 71, 67, 69, 98, 109, 113, 69, 110, 111, 107, 80, 80, 74, 57, 48, 72, 113, 53, 122, 87, 47, 102, 120, 57, 101, 88, 112, 107, 75, 100, 67, 82, 73, 88, 97, 56, 74, 54, 118, 51, 49, 121, 84, 47, 55, 112, 110, 80, 79, 47, 104, 80, 118, 110, 47, 54, 52, 121, 65, 114, 65, 105, 80, 10, 104, 90, 97, 97, 54, 65, 102, 43, 72, 65, 107, 72, 107, 43, 51, 84, 117, 109, 78, 75, 74, 70, 86, 103, 120, 48, 69, 116, 47, 86, 79, 102, 53, 108, 74, 69, 113, 122, 68, 68, 108, 56, 110, 87, 65, 85, 43, 68, 118, 49, 103, 102, 88, 53, 71, 81, 118, 70, 74, 120, 48, 76, 90, 67, 10, 107, 79, 69, 111, 74, 77, 112, 99, 120, 105, 88, 83, 105, 110, 105, 86, 54, 100, 74, 74, 84, 77, 86, 43, 105, 121, 88, 113, 72, 80, 74, 87, 89, 86, 114, 74, 55, 75, 74, 70, 81, 107, 101, 67, 43, 88, 50, 121, 105, 120, 76, 79, 101, 105, 122, 43, 109, 80, 101, 49, 105, 110, 74, 80, 10, 49, 65, 54, 85, 107, 90, 78, 90, 50, 56, 54, 88, 75, 112, 71, 111, 69, 101, 52, 65, 80, 84, 114, 117, 69, 82, 122, 52, 43, 73, 117, 56, 80, 66, 65, 53, 53, 56, 76, 111, 77, 52, 116, 119, 77, 56, 65, 75, 50, 54, 102, 109, 81, 115, 90, 120, 54, 78, 67, 69, 49, 82, 78, 74, 10, 77, 110, 119, 50, 52, 111, 48, 73, 71, 98, 52, 70, 68, 86, 113, 78, 74, 50, 113, 83, 113, 121, 49, 52, 118, 87, 73, 56, 73, 71, 102, 43, 113, 57, 106, 83, 112, 81, 107, 73, 66, 50, 116, 83, 111, 107, 98, 119, 121, 47, 67, 66, 99, 50, 74, 43, 51, 65, 78, 74, 88, 100, 112, 109, 10, 86, 107, 82, 118, 49, 85, 49, 121, 71, 43, 113, 50, 68, 119, 54, 88, 70, 49, 56, 79, 68, 56, 115, 119, 120, 82, 53, 114, 50, 77, 110, 72, 66, 118, 115, 90, 79, 104, 56, 102, 105, 50, 98, 89, 110, 56, 101, 75, 100, 115, 85, 115, 89, 78, 67, 111, 102, 97, 107, 78, 120, 53, 105, 118, 10, 86, 110, 83, 77, 115, 89, 74, 67, 90, 118, 117, 66, 49, 110, 114, 71, 120, 111, 67, 86, 102, 48, 109, 118, 55, 82, 68, 55, 102, 109, 82, 110, 75, 47, 82, 100, 115, 54, 66, 49, 70, 84, 54, 69, 110, 115, 89, 57, 102, 108, 107, 75, 98, 103, 69, 67, 65, 119, 69, 65, 65, 81, 61, 61, 10, 45, 45, 45, 45, 45, 69, 78, 68, 32, 82, 83, 65, 32, 80, 85, 66, 76, 73, 67, 32, 75, 69, 89, 45, 45, 45, 45, 45 ];

        public static bool ValidateLicense(out LicenseData? licenseData)
        {
            licenseData = new LicenseData();
            string path = Path.Join(AppDomain.CurrentDomain.BaseDirectory, "Data", "license.lic");
            if (!File.Exists(path))
                return false;
            string license = File.ReadAllText(path);
            var rsaVerify = new RSACryptoServiceProvider(4096);
            rsaVerify.ImportFromPem(Encoding.ASCII.GetString(p));

            string[] data = license.Split('.');
            if (data.Length < 2)
                return false;

            try
            {
                var isValid = rsaVerify.VerifyData(Convert.FromBase64String(data[0]), SHA512.Create(), Convert.FromBase64String(data[1]));
                licenseData = JsonSerializer.Deserialize<LicenseData>(Encoding.UTF8.GetString(Convert.FromBase64String(data[0])));

                return isValid;
            }
            catch
            {
                return false;
            }
        }
    }

    internal record LicenseData
    {
        public string? CompanyName { get; init; }
        public string? LicenseType { get; init; }
        public string? InitialVersion { get; init; }
        public string? LicenseTerm { get; init; }
        public string? LicenseDate { get; init; }
        public string[]? Entitlements { get; init; }
    }
}
