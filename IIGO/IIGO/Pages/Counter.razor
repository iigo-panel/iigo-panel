@page "/counter"
@using System.Timers
@using IIGO.Services.Interfaces
@using IIGO.Services
@using IIGO.Models
@implements IDisposable
@inject IIGO.Program.ServiceResolver serviceResolver

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<hr />

<p role="status">Service: @ServiceName</p>

<button class="btn btn-secondary" @onclick="SendMessage">Send Message</button>

@code {
    private int currentCount = 0;
    private Timer timer = new(1000);
    private string ServiceName = "";

    protected override void OnInitialized()
    {
        timer.Elapsed += (sender, eventArgs) => OnTimerCallback();

        var service = serviceResolver(nameof(SMTPService));
        ServiceName = service?.ServiceName ?? "N/A";
    }

    private async Task SendMessage()
    {
        var service = serviceResolver(nameof(SMTPService));
        await service.SendMessageAsync(new MessageData(), new System.Threading.CancellationToken());
    }

    private void OnTimerCallback()
    {
        _ = InvokeAsync(() =>
        {
            currentCount++;
            StateHasChanged();
        });
    }

    private void IncrementCount()
    {
        //if (!timer.Enabled)
        //    timer.Start();
        //else
        //    timer.Stop();
        currentCount++;
    }

    public void Dispose() => timer.Dispose();
}
