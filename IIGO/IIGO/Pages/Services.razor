@page "/services"
@using System.ServiceProcess;
@using System.Management;
@using Microsoft.Win32;

<h3>Services</h3>

@if (services == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Status</th>
                <th>Startup Type</th>
                <th>Log On As</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var service in services)
            {
                var info = GetServiceDescription(service.ServiceName);
                <tr>
                    <td style="max-width:300px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden" title="@service.DisplayName">@service.DisplayName</td>
                    <td style="max-width:400px;text-overflow:ellipsis;white-space:nowrap;overflow:hidden" title="@info.Description">@info.Description</td>
                    <td>@service.Status</td>
                    <td>@service.StartType @(GetDelayedStatus(service.ServiceName, "") ? "(Delayed Start)" : "")</td>
                    <td>@info.Logon</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ServiceController[] services;

    protected override void OnInitialized()
    {
        services = ServiceController.GetServices().OrderBy(x => x.DisplayName).ToArray();
    }

    static (string Description, string Logon) GetServiceDescription(string serviceName)
    {
        using (ManagementObject service = new ManagementObject(new ManagementPath(string.Format("Win32_Service.Name='{0}'", serviceName))))
        {
            string description = "";
            string logon = "";
            try
            {
                description = service["Description"].ToString();
            }
            catch { }
            try
            {
                logon = service["startname"].ToString().Replace("NT Authority\\", "", StringComparison.OrdinalIgnoreCase);
            }
            catch { }

            return (description, logon);
        }
    }
    static bool GetDelayedStatus(string serviceName, string machineName)
    {
        using (var regKey = RegistryKey.OpenRemoteBaseKey(RegistryHive.LocalMachine, machineName))
        {
            using (RegistryKey serviceKey = regKey.OpenSubKey(@"System\CurrentControlSet\Services\" + serviceName, false))
            {
                int startMode = (int)serviceKey.GetValue("Start", 0, RegistryValueOptions.None);
                int delayedAutostart = (int)serviceKey.GetValue("DelayedAutostart", 0, RegistryValueOptions.None);

                return startMode == 2 && delayedAutostart == 1;
            }
        }
    }
}
