@page "/apppools"
@using IIGO.Services
@using System.Timers
@using Microsoft.Web.Administration
@rendermode InteractiveServer

<PageTitle>Application Pools</PageTitle>

<h1>Application Pools</h1>

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="3000" Placement="ToastsPlacement.TopRight" />

@if (pools == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <button class="btn btn-primary">Monitor</button>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Status</th>
                <th>Identity</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pool in pools)
            {
                <tr>
                    <td>@pool.Name</td>
                    <td>@pool.State</td>
                    <td>@(pool.ProcessModel.IdentityType == ProcessModelIdentityType.SpecificUser ? pool.ProcessModel.UserName : pool.ProcessModel.IdentityType)</td>
                    <td>
                        <button @onclick="@(e => RecyclePool(pool.Name))" class="btn btn-primary">Recycle</button>&nbsp;
                        @if (pool.State == ObjectState.Stopped)
                        {
                            <button @onclick="@(e => StartPool(pool.Name))" class="btn btn-success">Start</button>
                        }
                        @if (pool.State == ObjectState.Started)
                        {
                            <button @onclick="@(e => StopPool(pool.Name))" class="btn btn-danger">Stop</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<ApplicationPool>? pools = null;
    private Timer timer = new(3000);

    protected override async Task OnInitializedAsync()
    {
        pools = await IISService.GetAppPools();
        timer.Elapsed += (sender, eventArgs) => UpdateValues();
        timer.Start();
    }

    protected void UpdateValues()
    {
        _ = InvokeAsync(async () =>
        {
            pools = await IISService.GetAppPools();
            StateHasChanged();
        });
    }

    protected async Task RecyclePool(string poolName)
    {
        //ShowMessage($"{poolName} recycled!", ToastType.Success);
        await IISService.Recycle(poolName);
    }

    protected async Task StartPool(string poolName)
    {
        await IISService.StartPool(poolName);
    }

    protected async Task StopPool(string poolName)
    {
        await IISService.StopPool(poolName);
    }

    List<ToastMessage> messages = new List<ToastMessage>();

    private void ShowMessage(string message, ToastType toastType) => messages.Add(CreateToastMessage(message, toastType));

    private ToastMessage CreateToastMessage(string message, ToastType toastType)
    => new ToastMessage
        {
            Type = toastType,
            Message = message,
        };
}